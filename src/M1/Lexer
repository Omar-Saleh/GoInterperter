import java.lang.System;
import java.io.*;
import java.util.*;

class Lexer {

 Yylex tokenizer;
 public  Lexer(String fileName) 
 {
   try
   {
   tokenizer=new Yylex(new BufferedReader(new FileReader(fileName)));
   }
   catch(Exception e)
   {
   
   }  
 }
 public Token nextToken()
 {
  Token next=null;
  try
  {
   next=  tokenizer.getToken();
  }
  catch(Exception e)
  {
  }
  return next;
 }
 }


%%


%function getToken
%type Token
%char
%line
%state PACKAGE, IMPORT, COMMENT
%{
 //initialize  variables to be used by class
 String eofMessage = "DONE";
 int import_open_paran;
 Stack<Character> checker;
 int comment_count = 0;
%}


%init{
//Add code to be executed on initialization of the lexer
checker = new Stack<Character>();

%init}

UNICODE_LETTER=[A-Za-z]
UNICODE_DIGIT=[0-9]
UNICODE_CHAR=[^\"\n]
LETTER=({UNICODE_LETTER}|_)
UNICODE_VALUE=({UNICODE_CHAR}|{ESC_CHAR})
ESC_CHAR=\\(a|b|f|n|r|t|v|\\|'|\")
RAW_STRING =`({UNICODE_CHAR}|{NEWLINE})*`
INTERP_STRING =\"{UNICODE_VALUE}*\"
STRING_LIT={RAW_STRING}|{INTERP_STRING}
NEWLINE = [\n]
SPACE=[\ ]
TAB=[\t]
INT_LIT = ([1-9]{UNICODE_DIGIT}*)|0
PACKAGE=package
NEWLINE= [\ \n]
FOR =for
IF=if
PERCENT=%
COLON_EQUAL = (:=)
IMPORT = import
CONST=const
EQUAL==
FUNC=func
OPEN_PARAN = (\()
CLOSE_PARAN = (\))
OPEN_CURLY=\{
CLOSE_CURLY=\}
ELSE=else
DOT=\.
SLASH=/
REL_OP===|!=|<|>|<=|>=
AND_OP=&&
MUL_OP=\*
MINUS_OP=-
RETURN=return
SWITCH=switch
CASE=case
COLON=:
DEFAULT=default
COMMENT=//(.)*
IDENTIFIER=({LETTER}({LETTER}|{UNICODE_DIGIT})*)
INCREMENT=\+\+
DECREMENT=--
COMMA =,
SEMI_COLON =;
PLUS =\+
OPEN_SQUARE=\[
CLOSE_SQUARE=\]
TYPE =type
STRUCT =struct
VAR =var

OR_OP=\|\|
CDOTS =\.\.\.
SHIFT_LEFT =<<
SHIFT_RIGHT=>>
BAR =\|
EXCLAMATION=!
LESS_DASH =<-
AMBERSAND=&

%eofval{
//Add code to be executed when the end of the file is reached
if(checker.size() != 0)
 return (new Token(Token.EOF, "There is some " + checker.peek() + " that is not closed"));
else
 return (new Token(Token.EOF, "DONE"));
%eofval}


%% 
<YYINITIAL> {OR_OP} {return (new Token(Token.OR_OP,yytext())); }
<YYINITIAL> {CDOTS} {return (new Token(Token.CDOTS,yytext())); }
<YYINITIAL> {SHIFT_LEFT} {return (new Token(Token.SHIFT_LEFT,yytext())); }
<YYINITIAL> {BAR} {return (new Token(Token.BAR,yytext())); }
<YYINITIAL> {EXCLAMATION} {return (new Token(Token.EXCLAMATION,yytext())); }
<YYINITIAL> {LESS_DASH} {return (new Token(Token.LESS_DASH,yytext())); }
<YYINITIAL> {AMBERSAND} {return (new Token(Token.AMBERSAND,yytext())); }

<YYINITIAL> {IMPORT} {return (new Token(Token.IMPORT,yytext())); }
<YYINITIAL> {PACKAGE} { return (new Token(Token.PACKAGE,yytext())); }
<YYINITIAL> {FOR} {return (new Token(Token.FOR,yytext()));}
<YYINITIAL> {COLON_EQUAL} {return (new Token(Token.COLON_EQUAL,yytext()));}
<YYINITIAL> {COLON} {return (new Token(Token.COLON,yytext()));}
<YYINITIAL> {DOT} {return (new Token(Token.DOT,yytext()));}
<YYINITIAL> {IF} {return (new Token(Token.IF,yytext()));}
<YYINITIAL> {ELSE} {return (new Token(Token.ELSE,yytext()));}
<YYINITIAL> {AND_OP} {return (new Token(Token.AND_OP,yytext()));}
<YYINITIAL> {PERCENT} {return (new Token(Token.PERCENT,yytext()));}
<YYINITIAL> {REL_OP} {return (new Token(Token.REL_OP,yytext()));}
<YYINITIAL> {MUL_OP} {return (new Token(Token.ASTRISK,yytext()));}
<YYINITIAL> {SWITCH} {return (new Token(Token.SWITCH,yytext()));}
<YYINITIAL> {CASE} {return (new Token(Token.CASE,yytext()));}
<YYINITIAL> {DEFAULT} {return (new Token(Token.DEFAULT,yytext()));}
<YYINITIAL> {MINUS_OP} {return (new Token(Token.MINUS,yytext()));}
<YYINITIAL> {SLASH} {return (new Token(Token.SLASH,yytext()));}
<YYINITIAL> {FUNC} {return (new Token(Token.FUNC,yytext()));}
<YYINITIAL> {RETURN} {return (new Token(Token.RETURN,yytext()));}
<YYINITIAL> {EQUAL} {return (new Token(Token.EQUAL,yytext()));}
<YYINITIAL> {INCREMENT} {return (new Token(Token.INCREMENT,yytext()));}
<YYINITIAL> {DECREMENT} {return (new Token(Token.DECREMENT,yytext()));}
<YYINITIAL> {OPEN_PARAN} {checker.push('('); return (new Token(Token.OPEN_PARAN,yytext()));}
<YYINITIAL> {CLOSE_PARAN} {
	if(checker.peek() == '(') {
	 	checker.pop();
	 	return (new Token(Token.CLOSE_PARAN,yytext()));
	 }
	if(checker.peek() == '{') {
		return (new Token(Token.ERROR, ") has no matching ( in line " + (yyline + 1)));
	}
}
<YYINITIAL> {OPEN_CURLY} {checker.push('{'); return (new Token(Token.OPEN_CURLY,yytext()));}
<YYINITIAL> {CLOSE_CURLY} {
	if(checker.peek() == '{') {
	 	checker.pop();
	 	return (new Token(Token.CLOSE_CURLY,yytext()));
	 }
	else
		return (new Token(Token.ERROR, "} has no matching { in line " + (yyline + 1)));
}


<YYINITIAL> {COMMA} {return (new Token(Token.COMMA,yytext()));}
<YYINITIAL> {SEMI_COLON} {return (new Token(Token.SEMI_COLON,yytext()));}
<YYINITIAL> {PLUS} {return (new Token(Token.PLUS,yytext()));}
<YYINITIAL> {OPEN_SQUARE} {return (new Token(Token.OPEN_SQUARE,yytext()));}
<YYINITIAL> {CLOSE_SQUARE} {return (new Token(Token.CLOSE_SQUARE,yytext()));}
<YYINITIAL> {TYPE} {return (new Token(Token.TYPE,yytext()));}
<YYINITIAL> {STRUCT} {return (new Token(Token.STRUCT,yytext()));}
<YYINITIAL> {CONST} {return (new Token(Token.CONST,yytext()));}
<YYINITIAL> {VAR} {return (new Token(Token.VAR,yytext()));}

<YYINITIAL> {COMMENT} {}
<YYINITIAL> {SPACE} {}
<YYINITIAL> {TAB} {}
<YYINITIAL> {INT_LIT} { return (new Token(Token.INT_LIT,yytext())); }
<YYINITIAL> {INTERP_STRING} { return (new Token(Token.STRING_LIT,yytext())); }
<YYINITIAL> {NEWLINE} {}
<YYINITIAL> {IDENTIFIER} {return (new Token(Token.IDENTIFIER,yytext()));}
<YYINITIAL> . {return new Token(Token.ERROR, "Invalid input: " + yytext() + " in line " + (yyline + 1));}


<PACKAGE> {SPACE} {}
<PACKAGE> {NEWLINE} {}
<PACKAGE> {TAB} {}
<PACKAGE> {IDENTIFIER} { yybegin(YYINITIAL); return (new Token(Token.IDENTIFIER,yytext())); } 
<PACKAGE> . {return new Token(Token.ERROR, "Invalid input: " + yytext());}

<IMPORT> {SPACE} {}
<IMPORT> {NEWLINE} {}
<IMPORT> {TAB} {}
<IMPORT>  {OPEN_PARAN} { import_open_paran = 1; return new Token(Token.OPEN_PARAN, yytext());}
<IMPORT> {STRING_LIT} { if(import_open_paran == 0) yybegin(YYINITIAL); return (new Token(Token.STRING_LIT,yytext())); }
<IMPORT>  {CLOSE_PARAN} { yybegin(YYINITIAL); import_open_paran = 0; return new Token(Token.CLOSE_PARAN, yytext());}
<IMPORT> {IDENTIFIER} { yybegin(YYINITIAL); return (new Token(Token.IDENTIFIER,yytext())); } 
<IMPORT> . {return new Token(Token.ERROR, "Invalid input: " + yytext());}
